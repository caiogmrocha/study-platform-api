import { {{ pascalCase name }}UseCase } from '@/modules/{{ dashCase module }}/{{ dashCase name }}/{{ dashCase name }}-use-case'
import { created, clientError, HttpResponse } from "@/core/http/i-http-response";
import { IController } from "@/core/http/i-controller";

export interface {{ pascalCase name }}ControllerRequest {}

export class {{ pascalCase name }}Controller implements IController<{{ pascalCase name }}ControllerRequest> {
  constructor (
    private readonly {{ camelCase name }}UseCase: {{ pascalCase name }}UseCase,
  ) {}

  async handle(request: {{ pascalCase name }}ControllerRequest): Promise<HttpResponse> {
    const resultOrError = await this.{{ camelCase name }}UseCase.execute({})

    if (resultOrError.isLeft()) {
      const error = resultOrError.value

      return clientError(error)
    }

    return created()
  }
}
